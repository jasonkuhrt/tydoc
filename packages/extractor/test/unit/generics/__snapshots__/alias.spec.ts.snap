// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`bugs generic instance within union type 1`] = `
Object {
  "kind": "alias",
  "name": "A",
  "raw": Object {
    "nodeFullText": "export type A = 1 | Record<string, 2>;",
    "nodeText": "export type A = 1 | Record<string, 2>;",
    "typeText": "A",
  },
  "tsdoc": null,
  "type": Object {
    "discriminantProperties": null,
    "isDiscriminated": false,
    "kind": "union",
    "raw": Object {
      "nodeFullText": "export type A = 1 | Record<string, 2>;",
      "nodeText": "export type A = 1 | Record<string, 2>;",
      "typeText": "A",
    },
    "types": Array [
      Object {
        "base": "number",
        "kind": "literal",
        "name": "1",
      },
      Object {
        "args": Array [
          Object {
            "kind": "primitive",
            "type": "string",
          },
          Object {
            "base": "number",
            "kind": "literal",
            "name": "2",
          },
        ],
        "kind": "generic_instance",
        "raw": Object {
          "nodeFullText": "type Record<K extends keyof any,T>={[P in K]:T;};",
          "nodeText": "type Record<K extends keyof any,T>={[P in K]:T;};",
          "typeText": "Record<string, 2>",
        },
        "target": Object {
          "kind": "standard_library",
          "location": Object {
            "modulePath": "typescript/lib/lib.es5.d.ts",
          },
          "name": "Record",
          "raw": Object {
            "nodeFullText": "type Record<K extends keyof any,T>={[P in K]:T;};",
            "nodeText": "type Record<K extends keyof any,T>={[P in K]:T;};",
            "typeText": "Record<K, T>",
          },
        },
      },
    ],
  },
  "typeParameters": Array [],
}
`;

exports[`first type parameter the alias object type default is added to the type index and refererenced 1`] = `
Array [
  Object {
    "default": Object {
      "kind": "typeIndexRef",
      "link": "(a).Bar",
    },
    "name": "T",
    "raw": Object {
      "nodeFullText": "T = Bar",
      "nodeText": "T = Bar",
      "typeText": "T",
    },
  },
]
`;

exports[`first type parameter the alias object type default is added to the type index and refererenced 2`] = `
Object {
  "kind": "alias",
  "name": "Bar",
  "raw": Object {
    "nodeFullText": "export type Bar = { a: 1 };",
    "nodeText": "export type Bar = { a: 1 };",
    "typeText": "Bar",
  },
  "tsdoc": null,
  "type": Object {
    "kind": "object",
    "props": Array [
      Object {
        "kind": "prop",
        "name": "a",
        "type": Object {
          "base": "number",
          "kind": "literal",
          "name": "1",
        },
      },
    ],
    "raw": Object {
      "nodeFullText": "export type Bar = { a: 1 };",
      "nodeText": "export type Bar = { a: 1 };",
      "typeText": "Bar",
    },
  },
  "typeParameters": Array [],
}
`;

exports[`first type parameter the interface object type default is added to the type index and refererenced 1`] = `
Array [
  Object {
    "default": Object {
      "kind": "typeIndexRef",
      "link": "(a).Bar",
    },
    "name": "T",
    "raw": Object {
      "nodeFullText": "T = Bar",
      "nodeText": "T = Bar",
      "typeText": "T",
    },
  },
]
`;

exports[`first type parameter the interface object type default is added to the type index and refererenced 2`] = `
Object {
  "kind": "interface",
  "name": "Bar",
  "props": Array [
    Object {
      "kind": "prop",
      "name": "a",
      "type": Object {
        "base": "number",
        "kind": "literal",
        "name": "1",
      },
    },
  ],
  "raw": Object {
    "nodeFullText": "export interface Bar {
  a: 1;
}",
    "nodeText": "export interface Bar {
  a: 1;
}",
    "typeText": "Bar",
  },
  "tsdoc": null,
  "typeParameters": Array [],
}
`;

exports[`first type parameter the name 1`] = `
Array [
  Object {
    "default": null,
    "name": "T",
    "raw": Object {
      "nodeFullText": "T",
      "nodeText": "T",
      "typeText": "T",
    },
  },
]
`;

exports[`first type parameter the primitive type default 1`] = `
Array [
  Object {
    "default": Object {
      "kind": "primitive",
      "type": "string",
    },
    "name": "T",
    "raw": Object {
      "nodeFullText": "T = string",
      "nodeText": "T = string",
      "typeText": "T",
    },
  },
]
`;

exports[`standard library generic instances have type arguments captured and generic target set as external Record 1`] = `
Object {
  "isTerm": false,
  "isType": true,
  "kind": "export",
  "name": "A",
  "type": Object {
    "args": Array [
      Object {
        "kind": "primitive",
        "type": "string",
      },
      Object {
        "kind": "primitive",
        "type": "number",
      },
    ],
    "kind": "generic_instance",
    "raw": Object {
      "nodeFullText": "type Record<K extends keyof any,T>={[P in K]:T;};",
      "nodeText": "type Record<K extends keyof any,T>={[P in K]:T;};",
      "typeText": "Record<string, number>",
    },
    "target": Object {
      "kind": "standard_library",
      "location": Object {
        "modulePath": "typescript/lib/lib.es5.d.ts",
      },
      "name": "Record",
      "raw": Object {
        "nodeFullText": "type Record<K extends keyof any,T>={[P in K]:T;};",
        "nodeText": "type Record<K extends keyof any,T>={[P in K]:T;};",
        "typeText": "Record<K, T>",
      },
    },
  },
}
`;
