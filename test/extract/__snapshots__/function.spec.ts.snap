// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`extracts docs 1`] = `
Object {
  "hybrids": Array [],
  "length": 3,
  "terms": Array [
    Object {
      "jsDoc": null,
      "kind": "function",
      "languageLevel": "term",
      "name": "a",
      "signature": Object {
        "parameters": Array [],
        "return": Object {
          "name": "void",
        },
      },
      "sourceLocation": Object {
        "fileLine": 1,
        "filePath": "/test.ts",
      },
      "text": "export function a() {}",
    },
    Object {
      "jsDoc": null,
      "kind": "function",
      "languageLevel": "term",
      "name": "b",
      "signature": Object {
        "parameters": Array [
          Object {
            "name": "a",
            "type": Object {
              "name": "boolean",
            },
          },
        ],
        "return": Object {
          "name": "void",
        },
      },
      "sourceLocation": Object {
        "fileLine": 2,
        "filePath": "/test.ts",
      },
      "text": "export function b(a: boolean) {}",
    },
    Object {
      "jsDoc": null,
      "kind": "function",
      "languageLevel": "term",
      "name": "c",
      "signature": Object {
        "parameters": Array [
          Object {
            "name": "a",
            "type": Object {
              "name": "string",
            },
          },
        ],
        "return": Object {
          "name": "number",
        },
      },
      "sourceLocation": Object {
        "fileLine": 3,
        "filePath": "/test.ts",
      },
      "text": "export function c(a: string): number {}",
    },
  ],
  "types": Array [],
}
`;

exports[`jsdoc extracts doc from a variable statement 1`] = `
Object {
  "source": "/**
 * primary
 */",
}
`;

exports[`jsdoc splits multiple jsDoc blocks by primary and additional (closest to code is primary) 1`] = `
Object {
  "additional": Array [
    Object {
      "source": "/**
 * additional 2
 */",
    },
    Object {
      "source": "/**
 * additional 1
 */",
    },
  ],
  "primary": Object {
    "source": "/**
 * primary
 */",
  },
}
`;

exports[`jsdoc whitespace and comments between multiple jsDoc blocks are ignored 1`] = `
Object {
  "additional": Array [
    Object {
      "source": "/**
 * additional 2
 */",
    },
    Object {
      "source": "/**
 * additional 1
 */",
    },
  ],
  "primary": Object {
    "source": "/**
 * primary
 */",
  },
}
`;

exports[`treats a variable declaration initialized to a function as a function 1`] = `
Object {
  "hybrids": Array [],
  "length": 1,
  "terms": Array [
    Object {
      "jsDoc": null,
      "kind": "function",
      "languageLevel": "term",
      "name": "foo",
      "signature": Object {
        "parameters": Array [],
        "return": Object {
          "name": "void",
        },
      },
      "sourceLocation": Object {
        "fileLine": 1,
        "filePath": "/test.ts",
      },
      "text": "function() {}",
    },
  ],
  "types": Array [],
}
`;

exports[`treats a variable declaration initialized to an arrow function as a function 1`] = `
Object {
  "hybrids": Array [],
  "length": 1,
  "terms": Array [
    Object {
      "jsDoc": null,
      "kind": "function",
      "languageLevel": "term",
      "name": "foo",
      "signature": Object {
        "parameters": Array [],
        "return": Object {
          "name": "void",
        },
      },
      "sourceLocation": Object {
        "fileLine": 1,
        "filePath": "/test.ts",
      },
      "text": "() => {}",
    },
  ],
  "types": Array [],
}
`;
